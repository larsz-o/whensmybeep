{"version":3,"sources":["redux/actions/userActions.js","redux/reducers/userReducer.js","redux/actions/loginActions.js","redux/reducers/loginReducer.js","redux/reducers/index.js","components/RowComponent/RowComponent.js","components/DashboardView/DashboardView.js","components/Header/Header.js","components/HomeView/HomeView.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","App.js","redux/sagas/userSaga.js","redux/requests/userRequests.js","redux/requests/loginRequests.js","redux/sagas/loginSaga.js","redux/sagas/index.js","index.js"],"names":["USER_ACTIONS","FETCH_USER","SET_USER","UNSET_USER","REQUEST_START","REQUEST_DONE","LOGOUT","USER_FETCH_FAILED","combineReducers","id","state","arguments","length","undefined","action","type","user","userName","username","isLoading","LOGIN_ACTIONS","LOGIN","CLEAR_LOGIN_ERROR","LOGIN_REQUEST_DONE","LOGIN_FAILED","LOGIN_FAILED_NO_CODE","INPUT_ERROR","triggerLogin","password","payload","triggerLogout","message","store","login","RowComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateTime","now","Date","getTime","distance","countDownDate","days","Math","floor","hours","minutes","seconds","setState","objectSpread","stopTimer","warning","deleteMed","axios","method","url","concat","med","then","response","getMedLists","catch","error","console","log","getTimerData","timer","setInterval","parseInt","data","time_end","expiration_time","clearInterval","handleChangeStart","dateNow","formattedDate","moment","format","open","defaultDate","expired","handleClose","updateDatabase","handleInputChange","event","endDate","target","value","react_default","a","createElement","index_es","className","room_id","name","variant","color","onClick","onClose","aria-labelledby","defaultValue","onChange","Component","DashboardView","componentDidMount","dispatch","medList","property","defineProperty","logout","postMedication","room","alert","history","push","_this2","label","inputProps","required","map","i","components_RowComponent_RowComponent","key","connect","Header","HomeView","components_DashboardView_DashboardView","LoginPage","preventDefault","handleInputChangeFor","propertyName","role","renderAlert","onSubmit","htmlFor","Link","to","RegisterPage","registerUser","passwordConfirmationAlert","body","post","status","confirm_password","swal","App","HashRouter","Switch","Redirect","exact","from","Route","path","component","components_Header_Header","render","fetchUser","userSaga","regenerator_default","wrap","_context","prev","next","put","get","headers","Content-Type","withCredentials","sent","t0","stop","_marked","_context2","takeLatest","_marked2","callLogin","loginUser","logoutUser","loginSaga","loginSaga_marked","loginSaga_marked2","_context3","_marked3","rootSaga","all","sagas_marked","middlewares","sagaMiddleware","createSagaMiddleware","theme","createMuiTheme","typography","useNextVariants","palette","primary","main","secondary","createStore","reducer","applyMiddleware","apply","run","ReactDOM","react_redux_es","styles","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b56a5049.chunk.js","sourcesContent":["\n//String Constants are a good way to keep your code DRY\n//Imagine changing an action everywhere its used. Gross!\n//This way we only need to change it one place.\nexport const USER_ACTIONS = {\n  FETCH_USER: 'FETCH_USER',\n  SET_USER: 'SET_USER_ACTION',\n  UNSET_USER: 'UNSET_USER_ACTION',\n  REQUEST_START: 'REQUEST_START_USER_ACTION',\n  REQUEST_DONE: 'REQUEST_DONE_USER_ACTION',\n  LOGOUT: 'LOGOUT',\n  USER_FETCH_FAILED: 'USER_FETCH_FAILED',\n};\n\n\n","import { combineReducers } from 'redux';\nimport { USER_ACTIONS } from '../actions/userActions';\n\n//id holds onto the user.id from passport/database\nconst id = (state = null, action) => {\n  switch (action.type) {\n    case USER_ACTIONS.SET_USER:\n      return action.user.id || state;\n    case USER_ACTIONS.UNSET_USER:\n      return null;\n    default:\n      return state;\n  }\n};\n\n//userName holds onto the user.username from passport/database\nconst userName = (state = null, action) => {\n  switch (action.type) {\n    case USER_ACTIONS.SET_USER:\n      return action.user.username || state;\n    case USER_ACTIONS.UNSET_USER:\n      return null;\n    default:\n      return state;\n  }\n};\n\n//isLoading holds the boolean that tracks whether or not this async call is out in the internet or not\nconst isLoading = (state = false, action) => {\n  switch (action.type) {\n    case USER_ACTIONS.REQUEST_START:\n      return true;\n    case USER_ACTIONS.REQUEST_DONE:\n      return false;\n    default:\n      return state;\n  }\n};\n\n//make one object that has keys id, username, isLoading\nexport default combineReducers({\n  id,\n  userName,\n  isLoading,\n});\n","//String Constants are a good way to keep your code DRY\n//Imagine changing an action everywhere its used. Gross!\n//This way we only need to change it one place.\nexport const LOGIN_ACTIONS = {\n  LOGIN: 'LOGIN',\n  CLEAR_LOGIN_ERROR: 'CLEAR_LOGIN_ERROR',\n  REQUEST_START: 'REQUEST_START',\n  LOGIN_REQUEST_DONE: 'LOGIN_REQUEST_DONE',\n  LOGIN_FAILED: 'LOGIN_FAILED',\n  LOGIN_FAILED_NO_CODE: 'LOGIN_FAILED_NO_CODE',\n  INPUT_ERROR: 'INPUT_ERROR',\n  LOGOUT: 'LOGOUT',\n};\n\n//These are functions - each returns an action.\n//You could call one an action creator.\nexport const clearError = () => ({\n  type: LOGIN_ACTIONS.CLEAR_LOGIN_ERROR,\n});\n\n\nexport const triggerLogin = (username, password) => ({\n  type: LOGIN_ACTIONS.LOGIN,\n  payload: {\n    username,\n    password,\n  },\n});\n\nexport const triggerLogout = () => ({\n  type: LOGIN_ACTIONS.LOGOUT,\n});\n\nexport function formError() {\n  return {\n    type: LOGIN_ACTIONS.INPUT_ERROR,\n    payload: 'Enter your username and password!',\n  };\n}\n","import { combineReducers } from 'redux';\nimport { LOGIN_ACTIONS } from '../actions/loginActions';\n\n//message holds the string that will display on the login screen if there's an error\nconst message = (state = '', action) => {\n  switch (action.type) {\n    case LOGIN_ACTIONS.CLEAR_LOGIN_ERROR:\n      return '';\n    case LOGIN_ACTIONS.LOGIN_FAILED:\n      return 'Ooops! The username and password didn\\'t match. Try again!';\n    case LOGIN_ACTIONS.LOGIN_FAILED_NO_CODE:\n      return 'Ooops! Something went wrong! Is the server running?';\n    case LOGIN_ACTIONS.INPUT_ERROR:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n//isLoading holds the boolean that tracks whether or not this async call is out in the internet or not\nconst isLoading = (state = false, action) => {\n  switch (action.type) {\n    case LOGIN_ACTIONS.REQUEST_START:\n      return true;\n    case LOGIN_ACTIONS.REQUEST_DONE:\n      return false;\n    default:\n      return state;\n  }\n};\n\n//make one object that has keys message, isLoading\nexport default combineReducers({\n  isLoading,\n  message,\n});\n","import { combineReducers } from 'redux';\nimport user from './userReducer';\nimport login from './loginReducer';\n\n//Lets make a bigger object for our store, with the objects from our reducers.\n//This is why we get this.props.reduxStore.user.isLoading\nconst store = combineReducers({\n  user,\n  login,\n});\n\nexport default store;\n","import React, {Component} from 'react'; \nimport {TableCell, TableRow, TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\nimport axios from 'axios'; \nimport moment from 'moment'; \n\nclass RowComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n          countDownDate: 1,\n          open: false, \n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0, \n          warning: \"none\", \n          defaultDate: '', \n          expiration_time: this.props.med.expiration_time, \n          expired: \"false\"\n        }\n    }\n    calculateTime = () => { \n        // Get todays date and time\n    let now = new Date().getTime();\n    // Find the distance between now and the count down date\n        let distance = this.state.countDownDate - now;\n       if (distance > 0){\n// Time calculations for hours, minutes and seconds\n    let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    this.setState({\n        ...this.state,\n        days: days,\n        hours: hours, \n        minutes: minutes,\n        seconds: seconds\n    });\n   if (distance <= 500){\n        this.stopTimer(); \n    }\n    else if (distance < 300000){\n        this.setState({\n            ...this.state,\n            warning: \"warning\"\n        })\n    } else if (distance > 300000){\n        this.setState({\n            ...this.state,\n            warning: \"none\"\n        })\n    }\n       } else {\n           this.stopTimer(); \n       }\n    }\n    componentDidMount(){\n        this.getTimerData();\n    }\n    deleteMed = () => {\n        axios({\n            method: 'DELETE', \n            url: `/medlist?id=${this.props.med.id}`\n        }).then((response) => {\n            this.props.getMedLists();\n        }).catch((error) => {\n            console.log('Error deleting medication', error);\n        });\n    }\n    //gets any ongoing countdowns from database for data persistence between login and logout\n    getTimerData = () => {\n        console.log('in get timer data', this.props.med.id);\n        axios({\n            method: 'GET', \n            url: `/medlist/countdown?id=${this.props.med.id}`\n        }).then((response) => {\n            console.log(response)\n            let now = new Date().getTime();\n            this.timer = setInterval(this.calculateTime, 1000);\n            this.setState({\n                    ...this.state,\n                    countDownDate: parseInt(response.data[0].time_end, 10),\n                    expiration_time: response.data[0].expiration_time\n            });\n             if (response.data[0].time_end - now <= 0){\n                console.log('in stopTimer');\n                clearInterval(this.timer);\n             }\n        }).catch((error) => {\n            console.log('Error getting current data', error);\n        })\n    }\n    handleChangeStart = () => {\n        console.log('start clicked'); \n        let dateNow = new Date();  \n        let formattedDate = moment(dateNow).format('YYYY-MM-DDTHH:mm:ss');\n        this.setState({\n            ...this.state,\n            open: true, \n            warning: \"none\",\n            defaultDate: formattedDate,\n            expiration_time: formattedDate,\n            expired: \"false\"\n        });\n    }\n    handleClose = () => {\n        this.setState({\n            ...this.state,\n            open: false\n        }); \n    this.updateDatabase();\n    } \n    stopTimer = () => {\n        console.log('in stopTimer');\n        clearInterval(this.timer);\n        let now = new Date().getTime();\n        axios({\n            method: 'PUT', \n            url: '/medlist',\n            data: {time_end: 0, id: this.props.med.id, expired: true, expiration_time: this.state.expiration_time}\n        }).then((response) => {\n            this.setState({\n                ...this.state,\n                hours: 0, \n                minutes: 0, \n                seconds: 0, \n                expired: \"true\",\n            }); \n            this.props.getMedLists(); \n        }).catch((error) => {\n            console.log('Error posting countdown time to server', error); \n        });\n    }\n     updateDatabase = () => {  \n         console.log('in update database for med:', this.props.med.id, 'new time:', this.state.countDownDate)\n    //sends the end time to the database \n        axios({\n            method: 'PUT', \n            url: '/medlist',\n            data: {time_end: this.state.countDownDate, id: this.props.med.id, expired: false, expiration_time: this.state.expiration_time}\n        }).then((response) => {\n            this.getTimerData(); \n        }).catch((error) => {\n            console.log('Error posting countdown time to server', error); \n        })\n    }\n    // Set the date we're counting down to, then turn it into milliseconds and set it to state. \n    handleInputChange = (event) => {\n        let endDate = event.target.value; \n        let countDownDate = new Date(endDate).getTime();\n        this.setState({\n            countDownDate: countDownDate,\n            expiration_time: endDate\n        });\n    }\n   render(){\n           return (\n            <TableRow className={this.state.warning}>\n                <TableCell className={this.state.expired}>{this.props.med.room_id}</TableCell>\n                <TableCell className={this.state.expired}>{this.props.med.name}</TableCell>\n                <TableCell className={this.state.expired}>{this.state.hours} h {this.state.minutes} m {this.state.seconds} s</TableCell>\n                {this.state.expiration_time !== 'N/A' && <TableCell className={this.state.expired}>{moment(this.state.expiration_time).format('LTS')}</TableCell>}\n                {this.state.expiration_time === 'N/A' && <TableCell className={this.expired}>N/A</TableCell>}\n                {/* when start is clicked, modal pops up to ask when the med should end */}\n                <TableCell className={this.state.expired}><Button variant=\"contained\" color=\"primary\" onClick={this.handleChangeStart}>Start</Button></TableCell>\n                <Dialog\n                open={this.state.open}\n                onClose={this.handleClose}\n                aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Set End Time</DialogTitle>\n                    <DialogContent>\n                        <TextField \n                         id=\"datetime-local\"\n                         type=\"datetime-local\"\n                         defaultValue={this.state.defaultDate}\n                         onChange={this.handleInputChange}/>\n                    </DialogContent>\n                    <DialogActions><Button variant=\"contained\" color=\"primary\" onClick={this.handleClose}>Submit</Button></DialogActions>\n                </Dialog>\n                <TableCell className={this.state.expired}><Button variant=\"contained\" color=\"secondary\" onClick={this.deleteMed}>Delete</Button></TableCell>\n            </TableRow>\n           );\n       }\n}\nexport default RowComponent; ","import React, { Component } from 'react';\nimport { Table, TableBody, TableHead, TableCell, TableRow, Paper, Button, NativeSelect, TextField } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { USER_ACTIONS } from '../../redux/actions/userActions';\nimport { triggerLogout } from '../../redux/actions/loginActions';\nimport RowComponent from '../RowComponent/RowComponent';\nimport axios from 'axios';\n\nconst mapStateToProps = state => ({\n    user: state.user,\n    login: state.login,\n});\nclass DashboardView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            room: 20,\n            name: '',\n            medList: [],\n            defaultDate: '',\n        }\n    }\n    componentDidMount = () => {\n        this.props.dispatch({ type: USER_ACTIONS.FETCH_USER });\n        this.getMedLists();\n    }\n    // componentDidUpdate runs after props and state have changed.\n    //If we arent loading the user call AND we dont have a user, kick us out to home\n    componentDidUpdate() {\n        if (!this.props.user.isLoading && this.props.user.userName === null) {\n            this.props.history.push('/login');\n        }\n    }\n    getMedLists = () => {\n        console.log('in get medlist')\n        axios({\n            method: 'GET',\n            url: `/medlist`\n        }).then((response) => {\n            console.log(response.data);\n            this.setState({\n                medList: response.data\n            })\n\n        }).catch((error) => {\n            console.log('Error', error);\n        });\n    }\n    handleInputChange = (event, property) => {\n        console.log(event.target.value);\n        this.setState({\n            [property]: event.target.value\n        });\n    }\n    logout = () => {\n        this.props.dispatch(triggerLogout());\n    }\n    postMedication = () => {\n        axios({\n            method: 'POST',\n            url: '/medlist',\n            data: { name: this.state.name, room_id: this.state.room, expiration_time: 'N/A' }\n        }).then((response) => {\n            this.getMedLists();\n            this.setState({\n                name: '',\n                room: 20,\n            })\n        }).catch((error) => {\n            console.log('Error posting your lists, please try again', error);\n            alert('Error posting your lists to the server. Please try again');\n        });\n    }\n    render() {\n        return (\n            <div>\n                <Button color=\"secondary\" variant=\"contained\" className=\"float-right\" onClick={this.logout}>Log Out</Button>\n                <div className=\"flex-box\">\n                    <label>Room # (required): </label>\n                    <NativeSelect\n                        value={this.state.room}\n                        label=\"Room Number\"\n                        onChange={(event) => this.handleInputChange(event, 'room')}\n                        inputProps={{\n                            name: 'room',\n                            id: 'select-menu'\n                        }}>\n                        <option value={20}>20</option>\n                        <option value={21}>21</option>\n                        <option value={22}>22</option>\n                        <option value={23}>23</option>\n                        <option value={24}>24</option>\n                        <option value={25}>25</option>\n                        <option value={28}>28</option>\n                        <option value={29}>29</option>\n                        <option value={30}>30</option>\n                        <option value={31}>31</option>\n                        <option value={32}>32</option>\n                        <option value={33}>33</option>\n                        <option value={34}>34</option>\n                        <option value={35}>35</option>\n                        <option value={36}>36</option>\n                        <option value={37}>37</option>\n                        <option value={38}>38</option>\n                        <option value={39}>39</option>\n                        <option value={41}>41</option>\n                        <option value={42}>42</option>\n                        <option value={43}>43</option>\n                        <option value={44}>44</option>\n                        <option value={45}>45</option>\n                        <option value={46}>46</option>\n                    </NativeSelect>\n                    </div>\n                    <div className=\"flex-box\">\n                    <label>Drug Name (required): </label>\n                    <TextField\n                        value={this.state.name}\n                        id=\"med-input\"\n                        onChange={(event) => this.handleInputChange(event, 'name')}\n                        required />\n                        <Button variant=\"contained\" className=\"submit-btn\" color=\"primary\" onClick={this.postMedication}>Submit</Button>\n                </div>\n                \n                <Paper>\n                    <Table id=\"table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Room Number</TableCell>\n                                <TableCell>Medication Name</TableCell>\n                                <TableCell>Time Until Next Beep</TableCell>\n                                <TableCell>Expiration</TableCell>\n                                <TableCell>Start</TableCell>\n                                <TableCell>Delete</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.medList.map((med, i) => {\n                                return (\n                                    <RowComponent getMedLists={this.getMedLists} key={i} med={med} />\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DashboardView); ","import React, {Component} from 'react'; \nimport {connect} from 'react-redux'; \nconst mapStateToProps = state => ({\n    user: state.user,\n  });\n\nclass Header extends Component {\n    render(){        \n        return(\n            <header className=\"App-header\">\n            <h2 className=\"App-title\">When's My Beep?</h2>\n            </header>\n        );\n    }\n}\nexport default connect(mapStateToProps)(Header); ","import React, {Component} from 'react'; \nimport DashboardView from '../DashboardView/DashboardView';\nimport { USER_ACTIONS } from '../../redux/actions/userActions';\nimport {connect} from 'react-redux'; \n\nconst mapStateToProps = state => ({\n    user: state.user,\n  });\nclass HomeView extends Component {\n    componentDidMount() {\n        this.props.dispatch({type: USER_ACTIONS.FETCH_USER});\n      }\n      componentDidUpdate() {\n        if (!this.props.user.isLoading && this.props.user.userName === null) {\n          this.props.history.push('/login');\n        } \n      }\n    render(){\n        return(\n            <div>\n                <DashboardView history={this.props.history}/>\n            </div>\n        ); \n    }\n}\nexport default connect(mapStateToProps)(HomeView); ","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { triggerLogin, formError, clearError } from '../../redux/actions/loginActions';\nimport { USER_ACTIONS } from '../../redux/actions/userActions';\nimport { Button } from '@material-ui/core'; \n\nconst mapStateToProps = state => ({\n  user: state.user,\n  login: state.login,\n});\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n    };\n  }\n  componentDidMount() {\n    // starts request for server to check that we are logged in\n    this.props.dispatch({ type: USER_ACTIONS.FETCH_USER });\n    this.props.dispatch(clearError());\n  }\n  componentDidUpdate() {\n    // if we have a response from the server and the user is logged in, redirect to the /user URL\n    if (!this.props.user.isLoading && this.props.user.userName !== null) {\n      this.props.history.push('/home');\n    }\n  }\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username === '' || this.state.password === '') {\n      this.props.dispatch(formError());\n    } else {\n      this.props.dispatch(triggerLogin(this.state.username, this.state.password));\n    }\n  }\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  renderAlert() {\n    if (this.props.login.message !== '') {\n      return (\n        <h2\n          className=\"alert\"\n          role=\"alert\"\n        >\n          {this.props.login.message}\n        </h2>\n      );\n    }\n    return (<span />);\n  }\n\n  render() {\n \n    return (\n      <div>\n        {this.renderAlert()}\n       <div className=\"flex-box-form\">\n        <form onSubmit={this.login}>\n        <h1>When's My Beep?</h1>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            >Submit</Button>\n            <Link to=\"/register\">Register</Link>\n          </div>\n        </form>\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {InputLabel, Input, Button, Typography} from '@material-ui/core';\nimport swal from 'sweetalert';\n\nclass RegisterPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n      message: '',\n    };\n  }\n\n  registerUser = (event) => {\n    event.preventDefault();\n    event.preventDefault();\n    if(this.passwordConfirmationAlert()){ \n    if (this.state.username === '' || this.state.password === '') {\n      this.setState({\n        message: 'Choose a username and password!',\n      });\n    } else {\n      const body = {\n        username: this.state.username,\n        password: this.state.password,\n      };\n\n      // making the request to the server to post the new user's registration\n      axios.post('/api/user/register/', body)\n        .then((response) => {\n          if (response.status === 201) {\n            this.props.history.push('/home');\n          } else {\n            this.setState({\n              message: 'Ooops! That didn\\'t work. The username might already be taken. Try again!',\n            });\n          }\n        })\n        .catch(() => {\n          this.setState({\n            message: 'Ooops! Something went wrong! Is the server running?',\n          });\n        });\n    }\n  }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n  passwordConfirmationAlert = () => {\n    if (this.state.password === this.state.confirm_password){\n      return true;\n    } else {\n      swal('Oh no!', 'Entered passwords do not match! Try again.', 'warning');\n      return false; \n    }\n  }\n  renderAlert() {\n    if (this.state.message !== '') {\n      return (\n        <Typography variant=\"headline\"\n          className=\"alert\"\n          role=\"alert\"\n        >\n          {this.state.message}\n        </Typography>\n      );\n    }\n    return (<span />);\n  }\n\n  render() {\n    return (\n      <div className=\"flex-box-form\">\n        {this.renderAlert()}\n        <form>\n          <Typography variant=\"headline\">Create Account</Typography>\n          <div>\n            <InputLabel htmlFor=\"username\"/>\n              Username:\n              <Input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <div>\n            <InputLabel htmlFor=\"password\"/>\n              Password:\n              <Input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n           <br/>\n            <InputLabel htmlFor=\"confirm-password\"/>\n              Confirm Password:\n              <Input\n                type=\"password\"\n                name=\"confirm-password\"\n                value={this.state.confirm_password}\n                onChange={this.handleInputChangeFor('confirm_password')}\n                required\n              />\n          </div>\n          <div>\n            <Button onClick={this.registerUser}>Submit</Button>\n            <Link to=\"/home\">Cancel</Link>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default RegisterPage;\n\n","import React, { Component } from 'react';\nimport './styles/main.css'; \nimport {HashRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\nimport DashboardView from './components/DashboardView/DashboardView.js'; \nimport Header from './components/Header/Header.js';\nimport HomeView from './components/HomeView/HomeView.js'; \nimport LoginPage from './components/LoginPage/LoginPage.js'; \nimport RegisterPage from './components/RegisterPage/RegisterPage.js';\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/login\" />\n        <Route\n          path=\"/login\"\n          component={LoginPage}\n        />\n        <Route\n          path=\"/register\"\n          component={RegisterPage}\n        />\n         <div className=\"App\">\n      <Header/>\n          <Route path='/home' component={HomeView}/>\n          <Route path='/dashboard' component={DashboardView}/>\n        </div>\n        <Route render={() => <h1>404</h1>} />\n        </Switch>\n      </Router> \n        \n    );\n  }\n}\n\nexport default App;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport { USER_ACTIONS } from '../actions/userActions';\nimport { callUser } from '../requests/userRequests';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    // sets that the async request is in progress\n    yield put({ type: USER_ACTIONS.REQUEST_START });\n    const user = yield callUser();\n    yield put({\n      type: USER_ACTIONS.SET_USER,\n      user,\n    });\n    // sets that the async request is finished\n    yield put({\n      type: USER_ACTIONS.REQUEST_DONE,\n    });\n  } catch (error) {\n    // sets that the async request is finished\n    yield put({\n      type: USER_ACTIONS.REQUEST_DONE,\n    });\n    yield put({\n      type: USER_ACTIONS.USER_FETCH_FAILED,\n      message: error.data || \"FORBIDDEN\",\n    });\n  }\n}\n/*\n  Starts fetchUser on each dispatched `FETCH_USER` action.\n  Allows concurrent fetches of user.\n*/\n// function* userSaga() {\n//   yield takeEvery('FETCH_USER', fetchUser);\n// }\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"FETCH_USER\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* userSaga() {\n  yield takeLatest(USER_ACTIONS.FETCH_USER, fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\n\n//calls /user on our server to retrieve user data\nexport function callUser() {\n  const config = {\n    headers: { 'Content-Type': 'application/json' },\n    withCredentials: true,\n  };\n\n  return axios.get('api/user', config)\n    .then(response => response.data)\n    .catch((error) => { throw error.response || error; });\n}\n\nexport function placeholder() {\n  console.log('hi');\n}\n","import axios from 'axios';\n\nexport function callLogin(payload) {\n  const body = ({\n    username: payload.username,\n    password: payload.password,\n  });\n\n  const config = {\n    headers: { 'Content-Type': 'application/json' },\n    withCredentials: true,\n  };\n\n  return axios.post('api/user/login', body, config)\n    .then(response => response.data)\n    .catch((error) => {\n      throw error.response || error;\n    });\n}\n\nexport function callLogout() {\n  const config = {\n    headers: { 'Content-Type': 'application/json' },\n    withCredentials: true,\n  };\n\n  return axios.get('api/user/logout', config)\n    .then(response => response.data)\n    .catch((error) => {\n      throw error.response || error;\n    });\n}\n","import { put, takeLatest } from 'redux-saga/effects';\nimport { LOGIN_ACTIONS } from '../actions/loginActions';\nimport { USER_ACTIONS } from '../actions/userActions';\nimport { callLogin, callLogout } from '../requests/loginRequests';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    yield put({ type: LOGIN_ACTIONS.CLEAR_LOGIN_ERROR });\n    // sets that we are starting an async request\n    yield put({ type: LOGIN_ACTIONS.REQUEST_START });\n    yield callLogin(action.payload);\n    // sets that the async request is finished\n    yield put({\n      type: LOGIN_ACTIONS.LOGIN_REQUEST_DONE,\n    });\n    yield put({\n      type: USER_ACTIONS.FETCH_USER,\n    });\n  } catch (error) {\n    // sets that the async request is finished\n    yield put({\n      type: LOGIN_ACTIONS.LOGIN_REQUEST_DONE,\n    });\n    if (error.status === 401) {\n      yield put({\n        type: LOGIN_ACTIONS.LOGIN_FAILED,\n        message: error.message,\n      });\n    } else {\n      yield put({\n        type: LOGIN_ACTIONS.LOGIN_FAILED_NO_CODE,\n        message: error.message,\n      });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    yield callLogout(action);\n    yield put({\n      type: USER_ACTIONS.UNSET_USER,\n    });\n  } catch (error) {\n    console.log('LOGOUT FAILED -- CHECK YOUR SERVER', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest(LOGIN_ACTIONS.LOGIN, loginUser);\n  yield takeLatest(LOGIN_ACTIONS.LOGOUT, logoutUser);\n}\n\nexport default loginSaga;\n","import { all } from 'redux-saga/effects';\nimport userSaga from './userSaga';\nimport loginSaga from './loginSaga';\n\n\nexport default function* rootSaga() {\n  yield all([\n    userSaga(),\n    loginSaga(),\n    // watchIncrementAsync()\n  ]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport reducer from './redux/reducers'; // imports ./redux/reducers/index.js\n\nimport App from './App';\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\n// Initializing to an empty object, but here is where you could\n// preload your redux state with initial values (from localStorage, perhaps)\nconst preloadedState = {};\nconst middlewares = [];\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(sagaMiddleware);\n\n// flag to only use the logger if in development mode\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\nconst theme = createMuiTheme({ \n  typography: {\n    useNextVariants: true,\n  },\n  palette: {\n    primary: {\n      main: '#47b8e0',\n    },\n    secondary: {\n      main: '#34314c',\n    }\n  }\n})\nconst store = createStore(\n  reducer,\n  preloadedState,\n  applyMiddleware(...middlewares),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}><MuiThemeProvider theme={theme}>\n    <App />\n    </MuiThemeProvider>\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}